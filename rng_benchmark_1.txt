MPS (Metal Performance Shaders) is available
Filename: /Users/shannonegan/Documents/DSV/StochastIQ/mlncp2024/rng_ml/rng_benchmark.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    31    487.2 MiB    487.2 MiB           1       @profile
    32                                             def benchmark_numpy(self):
    33    487.2 MiB      0.0 MiB           1           start_mem = self._measure_memory()
    34    487.2 MiB      0.0 MiB           1           start_time = time.time()
    35                                                 
    36                                                 # Generate random numbers
    37    563.5 MiB     76.3 MiB           1           _ = np.random.random(self.size)
    38                                                 
    39    563.5 MiB      0.0 MiB           1           elapsed = time.time() - start_time
    40    563.5 MiB      0.0 MiB           1           mem_used = self._measure_memory() - start_mem
    41                                                 
    42    563.5 MiB      0.0 MiB           1           return {
    43    563.5 MiB      0.0 MiB           1               'method': 'numpy',
    44    563.5 MiB      0.0 MiB           1               'device': 'cpu',
    45    563.5 MiB      0.0 MiB           1               'time': elapsed,
    46    563.5 MiB      0.0 MiB           1               'memory': mem_used,
    47    563.5 MiB      0.0 MiB           1               'throughput': self.size / elapsed / 1e6
    48                                                 }


Filename: /Users/shannonegan/Documents/DSV/StochastIQ/mlncp2024/rng_ml/rng_benchmark.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    50    563.5 MiB    563.5 MiB           1       @profile
    51                                             def benchmark_pytorch_cpu(self):
    52    563.5 MiB      0.0 MiB           1           start_mem = self._measure_memory()
    53    563.5 MiB      0.0 MiB           1           start_time = time.time()
    54                                                 
    55                                                 # Generate random numbers on CPU
    56    564.2 MiB      0.7 MiB           1           _ = torch.rand(self.size)
    57                                                 
    58    564.2 MiB      0.0 MiB           1           elapsed = time.time() - start_time
    59    564.2 MiB      0.0 MiB           1           mem_used = self._measure_memory() - start_mem
    60                                                 
    61    564.2 MiB      0.0 MiB           1           return {
    62    564.2 MiB      0.0 MiB           1               'method': 'pytorch',
    63    564.2 MiB      0.0 MiB           1               'device': 'cpu',
    64    564.2 MiB      0.0 MiB           1               'time': elapsed,
    65    564.2 MiB      0.0 MiB           1               'memory': mem_used,
    66    564.2 MiB      0.0 MiB           1               'throughput': self.size / elapsed / 1e6
    67                                                 }


Filename: /Users/shannonegan/Documents/DSV/StochastIQ/mlncp2024/rng_ml/rng_benchmark.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    69    564.2 MiB    564.2 MiB           1       @profile
    70                                             def benchmark_pytorch_mps(self):
    71    564.2 MiB      0.0 MiB           1           if not self.mps_available:
    72                                                     return None
    73                                                     
    74    564.2 MiB      0.0 MiB           1           start_mem = self._measure_memory()
    75    564.2 MiB      0.0 MiB           1           start_time = time.time()
    76                                                 
    77                                                 # Generate random numbers on MPS
    78    572.6 MiB      8.4 MiB           1           _ = torch.rand(self.size, device=self.mps_device)
    79                                                 # Ensure computation is complete
    80    439.5 MiB   -133.1 MiB           1           torch.mps.synchronize()
    81                                                 
    82    439.6 MiB      0.0 MiB           1           elapsed = time.time() - start_time
    83    439.6 MiB      0.0 MiB           1           mem_used = self._measure_memory() - start_mem
    84                                                 
    85    439.6 MiB      0.0 MiB           1           return {
    86    439.6 MiB      0.0 MiB           1               'method': 'pytorch',
    87    439.6 MiB      0.0 MiB           1               'device': 'mps',
    88    439.6 MiB      0.0 MiB           1               'time': elapsed,
    89    439.6 MiB      0.0 MiB           1               'memory': mem_used,
    90    439.6 MiB      0.0 MiB           1               'throughput': self.size / elapsed / 1e6
    91                                                 }


Filename: /Users/shannonegan/Documents/DSV/StochastIQ/mlncp2024/rng_ml/rng_benchmark.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    93    439.9 MiB    439.9 MiB           1       @profile
    94                                             def benchmark_tensorflow(self):
    95    439.9 MiB      0.0 MiB           1           start_mem = self._measure_memory()
    96    439.9 MiB      0.0 MiB           1           start_time = time.time()
    97                                                 
    98                                                 # Generate random numbers
    99    490.7 MiB     50.8 MiB           1           _ = tf.random.uniform((self.size,))
   100                                                 
   101    490.7 MiB      0.0 MiB           1           elapsed = time.time() - start_time
   102    490.7 MiB      0.0 MiB           1           mem_used = self._measure_memory() - start_mem
   103                                                 
   104    490.7 MiB      0.0 MiB           1           return {
   105    490.7 MiB      0.0 MiB           1               'method': 'tensorflow',
   106    490.7 MiB      0.0 MiB           1               'device': 'metal',  # TF automatically uses Metal on Apple Silicon
   107    490.7 MiB      0.0 MiB           1               'time': elapsed,
   108    490.7 MiB      0.0 MiB           1               'memory': mem_used,
   109    490.7 MiB      0.0 MiB           1               'throughput': self.size / elapsed / 1e6
   110                                                 }


Filename: /Users/shannonegan/Documents/DSV/StochastIQ/mlncp2024/rng_ml/rng_benchmark.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    31    490.7 MiB    490.7 MiB           1       @profile
    32                                             def benchmark_numpy(self):
    33    490.7 MiB      0.0 MiB           1           start_mem = self._measure_memory()
    34    490.7 MiB      0.0 MiB           1           start_time = time.time()
    35                                                 
    36                                                 # Generate random numbers
    37    528.8 MiB     38.1 MiB           1           _ = np.random.random(self.size)
    38                                                 
    39    528.8 MiB      0.0 MiB           1           elapsed = time.time() - start_time
    40    528.8 MiB      0.0 MiB           1           mem_used = self._measure_memory() - start_mem
    41                                                 
    42    528.8 MiB      0.0 MiB           1           return {
    43    528.8 MiB      0.0 MiB           1               'method': 'numpy',
    44    528.8 MiB      0.0 MiB           1               'device': 'cpu',
    45    528.8 MiB      0.0 MiB           1               'time': elapsed,
    46    528.8 MiB      0.0 MiB           1               'memory': mem_used,
    47    528.8 MiB      0.0 MiB           1               'throughput': self.size / elapsed / 1e6
    48                                                 }


Filename: /Users/shannonegan/Documents/DSV/StochastIQ/mlncp2024/rng_ml/rng_benchmark.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    50    528.8 MiB    528.8 MiB           1       @profile
    51                                             def benchmark_pytorch_cpu(self):
    52    528.8 MiB      0.0 MiB           1           start_mem = self._measure_memory()
    53    528.8 MiB      0.0 MiB           1           start_time = time.time()
    54                                                 
    55                                                 # Generate random numbers on CPU
    56    528.9 MiB      0.0 MiB           1           _ = torch.rand(self.size)
    57                                                 
    58    528.9 MiB      0.0 MiB           1           elapsed = time.time() - start_time
    59    528.9 MiB      0.0 MiB           1           mem_used = self._measure_memory() - start_mem
    60                                                 
    61    528.9 MiB      0.0 MiB           1           return {
    62    528.9 MiB      0.0 MiB           1               'method': 'pytorch',
    63    528.9 MiB      0.0 MiB           1               'device': 'cpu',
    64    528.9 MiB      0.0 MiB           1               'time': elapsed,
    65    528.9 MiB      0.0 MiB           1               'memory': mem_used,
    66    528.9 MiB      0.0 MiB           1               'throughput': self.size / elapsed / 1e6
    67                                                 }


Filename: /Users/shannonegan/Documents/DSV/StochastIQ/mlncp2024/rng_ml/rng_benchmark.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    69    528.9 MiB    528.9 MiB           1       @profile
    70                                             def benchmark_pytorch_mps(self):
    71    528.9 MiB      0.0 MiB           1           if not self.mps_available:
    72                                                     return None
    73                                                     
    74    528.9 MiB      0.0 MiB           1           start_mem = self._measure_memory()
    75    528.9 MiB      0.0 MiB           1           start_time = time.time()
    76                                                 
    77                                                 # Generate random numbers on MPS
    78    529.3 MiB      0.4 MiB           1           _ = torch.rand(self.size, device=self.mps_device)
    79                                                 # Ensure computation is complete
    80    529.3 MiB      0.0 MiB           1           torch.mps.synchronize()
    81                                                 
    82    529.3 MiB      0.0 MiB           1           elapsed = time.time() - start_time
    83    529.3 MiB      0.0 MiB           1           mem_used = self._measure_memory() - start_mem
    84                                                 
    85    529.3 MiB      0.0 MiB           1           return {
    86    529.3 MiB      0.0 MiB           1               'method': 'pytorch',
    87    529.3 MiB      0.0 MiB           1               'device': 'mps',
    88    529.3 MiB      0.0 MiB           1               'time': elapsed,
    89    529.3 MiB      0.0 MiB           1               'memory': mem_used,
    90    529.3 MiB      0.0 MiB           1               'throughput': self.size / elapsed / 1e6
    91                                                 }


Filename: /Users/shannonegan/Documents/DSV/StochastIQ/mlncp2024/rng_ml/rng_benchmark.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    93    529.3 MiB    529.3 MiB           1       @profile
    94                                             def benchmark_tensorflow(self):
    95    529.3 MiB      0.0 MiB           1           start_mem = self._measure_memory()
    96    529.3 MiB      0.0 MiB           1           start_time = time.time()
    97                                                 
    98                                                 # Generate random numbers
    99    529.3 MiB      0.0 MiB           1           _ = tf.random.uniform((self.size,))
   100                                                 
   101    529.3 MiB      0.0 MiB           1           elapsed = time.time() - start_time
   102    529.3 MiB      0.0 MiB           1           mem_used = self._measure_memory() - start_mem
   103                                                 
   104    529.3 MiB      0.0 MiB           1           return {
   105    529.3 MiB      0.0 MiB           1               'method': 'tensorflow',
   106    529.3 MiB      0.0 MiB           1               'device': 'metal',  # TF automatically uses Metal on Apple Silicon
   107    529.3 MiB      0.0 MiB           1               'time': elapsed,
   108    529.3 MiB      0.0 MiB           1               'memory': mem_used,
   109    529.3 MiB      0.0 MiB           1               'throughput': self.size / elapsed / 1e6
   110                                                 }


Filename: /Users/shannonegan/Documents/DSV/StochastIQ/mlncp2024/rng_ml/rng_benchmark.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    31    529.3 MiB    529.3 MiB           1       @profile
    32                                             def benchmark_numpy(self):
    33    529.3 MiB      0.0 MiB           1           start_mem = self._measure_memory()
    34    529.3 MiB      0.0 MiB           1           start_time = time.time()
    35                                                 
    36                                                 # Generate random numbers
    37    529.3 MiB      0.0 MiB           1           _ = np.random.random(self.size)
    38                                                 
    39    529.3 MiB      0.0 MiB           1           elapsed = time.time() - start_time
    40    529.3 MiB      0.0 MiB           1           mem_used = self._measure_memory() - start_mem
    41                                                 
    42    529.3 MiB      0.0 MiB           1           return {
    43    529.3 MiB      0.0 MiB           1               'method': 'numpy',
    44    529.3 MiB      0.0 MiB           1               'device': 'cpu',
    45    529.3 MiB      0.0 MiB           1               'time': elapsed,
    46    529.3 MiB      0.0 MiB           1               'memory': mem_used,
    47    529.3 MiB      0.0 MiB           1               'throughput': self.size / elapsed / 1e6
    48                                                 }


Filename: /Users/shannonegan/Documents/DSV/StochastIQ/mlncp2024/rng_ml/rng_benchmark.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    50    529.3 MiB    529.3 MiB           1       @profile
    51                                             def benchmark_pytorch_cpu(self):
    52    529.3 MiB      0.0 MiB           1           start_mem = self._measure_memory()
    53    529.3 MiB      0.0 MiB           1           start_time = time.time()
    54                                                 
    55                                                 # Generate random numbers on CPU
    56    529.3 MiB      0.0 MiB           1           _ = torch.rand(self.size)
    57                                                 
    58    529.3 MiB      0.0 MiB           1           elapsed = time.time() - start_time
    59    529.3 MiB      0.0 MiB           1           mem_used = self._measure_memory() - start_mem
    60                                                 
    61    529.3 MiB      0.0 MiB           1           return {
    62    529.3 MiB      0.0 MiB           1               'method': 'pytorch',
    63    529.3 MiB      0.0 MiB           1               'device': 'cpu',
    64    529.3 MiB      0.0 MiB           1               'time': elapsed,
    65    529.3 MiB      0.0 MiB           1               'memory': mem_used,
    66    529.3 MiB      0.0 MiB           1               'throughput': self.size / elapsed / 1e6
    67                                                 }


Filename: /Users/shannonegan/Documents/DSV/StochastIQ/mlncp2024/rng_ml/rng_benchmark.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    69    529.3 MiB    529.3 MiB           1       @profile
    70                                             def benchmark_pytorch_mps(self):
    71    529.3 MiB      0.0 MiB           1           if not self.mps_available:
    72                                                     return None
    73                                                     
    74    529.3 MiB      0.0 MiB           1           start_mem = self._measure_memory()
    75    529.3 MiB      0.0 MiB           1           start_time = time.time()
    76                                                 
    77                                                 # Generate random numbers on MPS
    78    529.3 MiB      0.0 MiB           1           _ = torch.rand(self.size, device=self.mps_device)
    79                                                 # Ensure computation is complete
    80    529.3 MiB      0.0 MiB           1           torch.mps.synchronize()
    81                                                 
    82    529.3 MiB      0.0 MiB           1           elapsed = time.time() - start_time
    83    529.3 MiB      0.0 MiB           1           mem_used = self._measure_memory() - start_mem
    84                                                 
    85    529.3 MiB      0.0 MiB           1           return {
    86    529.3 MiB      0.0 MiB           1               'method': 'pytorch',
    87    529.3 MiB      0.0 MiB           1               'device': 'mps',
    88    529.3 MiB      0.0 MiB           1               'time': elapsed,
    89    529.3 MiB      0.0 MiB           1               'memory': mem_used,
    90    529.3 MiB      0.0 MiB           1               'throughput': self.size / elapsed / 1e6
    91                                                 }


Filename: /Users/shannonegan/Documents/DSV/StochastIQ/mlncp2024/rng_ml/rng_benchmark.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    93    529.3 MiB    529.3 MiB           1       @profile
    94                                             def benchmark_tensorflow(self):
    95    529.3 MiB      0.0 MiB           1           start_mem = self._measure_memory()
    96    529.3 MiB      0.0 MiB           1           start_time = time.time()
    97                                                 
    98                                                 # Generate random numbers
    99    529.3 MiB      0.0 MiB           1           _ = tf.random.uniform((self.size,))
   100                                                 
   101    529.3 MiB      0.0 MiB           1           elapsed = time.time() - start_time
   102    529.3 MiB      0.0 MiB           1           mem_used = self._measure_memory() - start_mem
   103                                                 
   104    529.3 MiB      0.0 MiB           1           return {
   105    529.3 MiB      0.0 MiB           1               'method': 'tensorflow',
   106    529.3 MiB      0.0 MiB           1               'device': 'metal',  # TF automatically uses Metal on Apple Silicon
   107    529.3 MiB      0.0 MiB           1               'time': elapsed,
   108    529.3 MiB      0.0 MiB           1               'memory': mem_used,
   109    529.3 MiB      0.0 MiB           1               'throughput': self.size / elapsed / 1e6
   110                                                 }


Filename: /Users/shannonegan/Documents/DSV/StochastIQ/mlncp2024/rng_ml/rng_benchmark.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    31    529.3 MiB    529.3 MiB           1       @profile
    32                                             def benchmark_numpy(self):
    33    529.3 MiB      0.0 MiB           1           start_mem = self._measure_memory()
    34    529.3 MiB      0.0 MiB           1           start_time = time.time()
    35                                                 
    36                                                 # Generate random numbers
    37    529.3 MiB      0.0 MiB           1           _ = np.random.random(self.size)
    38                                                 
    39    529.3 MiB      0.0 MiB           1           elapsed = time.time() - start_time
    40    529.3 MiB      0.0 MiB           1           mem_used = self._measure_memory() - start_mem
    41                                                 
    42    529.3 MiB      0.0 MiB           1           return {
    43    529.3 MiB      0.0 MiB           1               'method': 'numpy',
    44    529.3 MiB      0.0 MiB           1               'device': 'cpu',
    45    529.3 MiB      0.0 MiB           1               'time': elapsed,
    46    529.3 MiB      0.0 MiB           1               'memory': mem_used,
    47    529.3 MiB      0.0 MiB           1               'throughput': self.size / elapsed / 1e6
    48                                                 }


Filename: /Users/shannonegan/Documents/DSV/StochastIQ/mlncp2024/rng_ml/rng_benchmark.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    50    529.3 MiB    529.3 MiB           1       @profile
    51                                             def benchmark_pytorch_cpu(self):
    52    529.3 MiB      0.0 MiB           1           start_mem = self._measure_memory()
    53    529.3 MiB      0.0 MiB           1           start_time = time.time()
    54                                                 
    55                                                 # Generate random numbers on CPU
    56    529.3 MiB      0.0 MiB           1           _ = torch.rand(self.size)
    57                                                 
    58    529.3 MiB      0.0 MiB           1           elapsed = time.time() - start_time
    59    529.3 MiB      0.0 MiB           1           mem_used = self._measure_memory() - start_mem
    60                                                 
    61    529.3 MiB      0.0 MiB           1           return {
    62    529.3 MiB      0.0 MiB           1               'method': 'pytorch',
    63    529.3 MiB      0.0 MiB           1               'device': 'cpu',
    64    529.3 MiB      0.0 MiB           1               'time': elapsed,
    65    529.3 MiB      0.0 MiB           1               'memory': mem_used,
    66    529.3 MiB      0.0 MiB           1               'throughput': self.size / elapsed / 1e6
    67                                                 }


Filename: /Users/shannonegan/Documents/DSV/StochastIQ/mlncp2024/rng_ml/rng_benchmark.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    69    529.3 MiB    529.3 MiB           1       @profile
    70                                             def benchmark_pytorch_mps(self):
    71    529.3 MiB      0.0 MiB           1           if not self.mps_available:
    72                                                     return None
    73                                                     
    74    529.3 MiB      0.0 MiB           1           start_mem = self._measure_memory()
    75    529.3 MiB      0.0 MiB           1           start_time = time.time()
    76                                                 
    77                                                 # Generate random numbers on MPS
    78    529.3 MiB      0.0 MiB           1           _ = torch.rand(self.size, device=self.mps_device)
    79                                                 # Ensure computation is complete
    80    529.3 MiB      0.0 MiB           1           torch.mps.synchronize()
    81                                                 
    82    529.3 MiB      0.0 MiB           1           elapsed = time.time() - start_time
    83    529.3 MiB      0.0 MiB           1           mem_used = self._measure_memory() - start_mem
    84                                                 
    85    529.3 MiB      0.0 MiB           1           return {
    86    529.3 MiB      0.0 MiB           1               'method': 'pytorch',
    87    529.3 MiB      0.0 MiB           1               'device': 'mps',
    88    529.3 MiB      0.0 MiB           1               'time': elapsed,
    89    529.3 MiB      0.0 MiB           1               'memory': mem_used,
    90    529.3 MiB      0.0 MiB           1               'throughput': self.size / elapsed / 1e6
    91                                                 }


Filename: /Users/shannonegan/Documents/DSV/StochastIQ/mlncp2024/rng_ml/rng_benchmark.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    93    529.3 MiB    529.3 MiB           1       @profile
    94                                             def benchmark_tensorflow(self):
    95    529.3 MiB      0.0 MiB           1           start_mem = self._measure_memory()
    96    529.3 MiB      0.0 MiB           1           start_time = time.time()
    97                                                 
    98                                                 # Generate random numbers
    99    529.3 MiB      0.0 MiB           1           _ = tf.random.uniform((self.size,))
   100                                                 
   101    529.3 MiB      0.0 MiB           1           elapsed = time.time() - start_time
   102    529.3 MiB      0.0 MiB           1           mem_used = self._measure_memory() - start_mem
   103                                                 
   104    529.3 MiB      0.0 MiB           1           return {
   105    529.3 MiB      0.0 MiB           1               'method': 'tensorflow',
   106    529.3 MiB      0.0 MiB           1               'device': 'metal',  # TF automatically uses Metal on Apple Silicon
   107    529.3 MiB      0.0 MiB           1               'time': elapsed,
   108    529.3 MiB      0.0 MiB           1               'memory': mem_used,
   109    529.3 MiB      0.0 MiB           1               'throughput': self.size / elapsed / 1e6
   110                                                 }


Filename: /Users/shannonegan/Documents/DSV/StochastIQ/mlncp2024/rng_ml/rng_benchmark.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    31    529.3 MiB    529.3 MiB           1       @profile
    32                                             def benchmark_numpy(self):
    33    529.3 MiB      0.0 MiB           1           start_mem = self._measure_memory()
    34    529.3 MiB      0.0 MiB           1           start_time = time.time()
    35                                                 
    36                                                 # Generate random numbers
    37    529.3 MiB      0.0 MiB           1           _ = np.random.random(self.size)
    38                                                 
    39    529.3 MiB      0.0 MiB           1           elapsed = time.time() - start_time
    40    529.3 MiB      0.0 MiB           1           mem_used = self._measure_memory() - start_mem
    41                                                 
    42    529.3 MiB      0.0 MiB           1           return {
    43    529.3 MiB      0.0 MiB           1               'method': 'numpy',
    44    529.3 MiB      0.0 MiB           1               'device': 'cpu',
    45    529.3 MiB      0.0 MiB           1               'time': elapsed,
    46    529.3 MiB      0.0 MiB           1               'memory': mem_used,
    47    529.3 MiB      0.0 MiB           1               'throughput': self.size / elapsed / 1e6
    48                                                 }


Filename: /Users/shannonegan/Documents/DSV/StochastIQ/mlncp2024/rng_ml/rng_benchmark.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    50    529.3 MiB    529.3 MiB           1       @profile
    51                                             def benchmark_pytorch_cpu(self):
    52    529.3 MiB      0.0 MiB           1           start_mem = self._measure_memory()
    53    529.3 MiB      0.0 MiB           1           start_time = time.time()
    54                                                 
    55                                                 # Generate random numbers on CPU
    56    529.3 MiB      0.0 MiB           1           _ = torch.rand(self.size)
    57                                                 
    58    529.3 MiB      0.0 MiB           1           elapsed = time.time() - start_time
    59    529.3 MiB      0.0 MiB           1           mem_used = self._measure_memory() - start_mem
    60                                                 
    61    529.3 MiB      0.0 MiB           1           return {
    62    529.3 MiB      0.0 MiB           1               'method': 'pytorch',
    63    529.3 MiB      0.0 MiB           1               'device': 'cpu',
    64    529.3 MiB      0.0 MiB           1               'time': elapsed,
    65    529.3 MiB      0.0 MiB           1               'memory': mem_used,
    66    529.3 MiB      0.0 MiB           1               'throughput': self.size / elapsed / 1e6
    67                                                 }


Filename: /Users/shannonegan/Documents/DSV/StochastIQ/mlncp2024/rng_ml/rng_benchmark.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    69    529.3 MiB    529.3 MiB           1       @profile
    70                                             def benchmark_pytorch_mps(self):
    71    529.3 MiB      0.0 MiB           1           if not self.mps_available:
    72                                                     return None
    73                                                     
    74    529.3 MiB      0.0 MiB           1           start_mem = self._measure_memory()
    75    529.3 MiB      0.0 MiB           1           start_time = time.time()
    76                                                 
    77                                                 # Generate random numbers on MPS
    78    529.3 MiB      0.0 MiB           1           _ = torch.rand(self.size, device=self.mps_device)
    79                                                 # Ensure computation is complete
    80    529.3 MiB      0.0 MiB           1           torch.mps.synchronize()
    81                                                 
    82    529.3 MiB      0.0 MiB           1           elapsed = time.time() - start_time
    83    529.3 MiB      0.0 MiB           1           mem_used = self._measure_memory() - start_mem
    84                                                 
    85    529.3 MiB      0.0 MiB           1           return {
    86    529.3 MiB      0.0 MiB           1               'method': 'pytorch',
    87    529.3 MiB      0.0 MiB           1               'device': 'mps',
    88    529.3 MiB      0.0 MiB           1               'time': elapsed,
    89    529.3 MiB      0.0 MiB           1               'memory': mem_used,
    90    529.3 MiB      0.0 MiB           1               'throughput': self.size / elapsed / 1e6
    91                                                 }


Filename: /Users/shannonegan/Documents/DSV/StochastIQ/mlncp2024/rng_ml/rng_benchmark.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    93    529.3 MiB    529.3 MiB           1       @profile
    94                                             def benchmark_tensorflow(self):
    95    529.3 MiB      0.0 MiB           1           start_mem = self._measure_memory()
    96    529.3 MiB      0.0 MiB           1           start_time = time.time()
    97                                                 
    98                                                 # Generate random numbers
    99    529.3 MiB      0.0 MiB           1           _ = tf.random.uniform((self.size,))
   100                                                 
   101    529.3 MiB      0.0 MiB           1           elapsed = time.time() - start_time
   102    529.3 MiB      0.0 MiB           1           mem_used = self._measure_memory() - start_mem
   103                                                 
   104    529.3 MiB      0.0 MiB           1           return {
   105    529.3 MiB      0.0 MiB           1               'method': 'tensorflow',
   106    529.3 MiB      0.0 MiB           1               'device': 'metal',  # TF automatically uses Metal on Apple Silicon
   107    529.3 MiB      0.0 MiB           1               'time': elapsed,
   108    529.3 MiB      0.0 MiB           1               'memory': mem_used,
   109    529.3 MiB      0.0 MiB           1               'throughput': self.size / elapsed / 1e6
   110                                                 }



RNG Performance Benchmark Results:
----------------------------------------------------------------------------------------------------
Method       Device   Avg Time (s) Avg Memory (MB) Throughput (M/s)
----------------------------------------------------------------------------------------------------
numpy        cpu      0.027        22.90           364.81         
pytorch      cpu      0.022        0.15            464.82         
pytorch      mps      0.046        -24.84          3030.09        
tensorflow   metal    0.009        10.16           1954.07        
